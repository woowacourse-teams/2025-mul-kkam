# 테스트용: PR에 새로운 커밋이 푸시될 때마다 실행
on:
  pull_request:
    types:
      - opened
      - synchronize
    branches:
      - main

# ---
# # 실제 배포용: PR이 main 브랜치에 머지될 때만 실행
# # 이 부분을 사용하려면 위에 있는 'on' 블록을 주석 처리하고 아래 주석을 해제
# on:
#   pull_request:
#     types:
#       - closed
#     branches:
#       - main

jobs:
  build-and-push:
    # 테스트용: PR의 모든 푸시 이벤트에 대해 실행
    # ---
    # # 실제 배포용: PR이 머지되었을 때만 Job이 실행되도록 함.
    # # 이 부분을 사용하려면 if 문 주석을 해제하세요.
    # if: github.event.pull_request.merged == true
    runs-on: ubuntu-24.04
    outputs:
      version: ${{ steps.ver.outputs.version }}
    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          # `fetch-depth: 0`은 전체 커밋 히스토리를 가져옴
          fetch-depth: 0

      # PR 제목에서 정규식을 이용해 v로 시작하는 버전을 추출
      - name: Derive version from PR title
        id: ver
        shell: bash
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          echo "PR Title: $PR_TITLE"
          
          # 정규식을 사용하여 PR 제목에서 'v'로 시작하는 버전(vX.Y.Z)을 찾음
          if [[ "$PR_TITLE" =~ (v[0-9]+\.[0-9]+\.[0-9]+) ]]; then
            VERSION="${BASH_REMATCH[1]}"
            echo "version=$VERSION" >> "$GITHUB_OUTPUT"
            echo "Resolved VERSION=$VERSION"
          else
            echo "Error: PR title does not contain a valid version tag (e.g., v1.2.3)."
            exit 1
          fi

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "21"

      - name: Grant execute permission to gradlew
        run: chmod +x gradlew
        working-directory: ./backend

      - name: Build project
        run: ./gradlew clean build -x test
        working-directory: ./backend

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Multi-Arch Image (tagged)
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          # 태그는 PR 제목에서 추출한 버전을 사용
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/mulkkam-prod:${{ steps.ver.outputs.version }}

  deploy:
    runs-on: [ self-hosted, linux, prod ]
    needs: build-and-push
    env:
      IMAGE_TAG: ${{ needs.build-and-push.outputs.version }}
    steps:
      - name: Stop and remove existing container
        run: |
          if [ "$(docker ps -a -q -f name=backend-app)" ]; then
            docker stop backend-app || true
            docker rm -f backend-app || true
          fi

      - name: Create .env file (inject IMAGE_TAG)
        run: |
          cat <<EOF > ~/mulkkam/.env
          IMAGE_TAG=${IMAGE_TAG}
          PROD_DATASOURCE_URL=${{ secrets.PROD_DATASOURCE_URL }}
          PROD_DATASOURCE_RW_USERNAME=${{ secrets.PROD_DATASOURCE_RW_USERNAME }}
          PROD_DATASOURCE_RW_PASSWORD=${{ secrets.PROD_DATASOURCE_RW_PASSWORD }}
          PROD_DATASOURCE_MIGRATION_USERNAME=${{ secrets.PROD_DATASOURCE_MIGRATION_USERNAME }}
          PROD_DATASOURCE_MIGRATION_PASSWORD=${{ secrets.PROD_DATASOURCE_MIGRATION_PASSWORD }}
          LOG_PATH=${{ secrets.LOG_PATH }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          ACCESS_TOKEN_EXPIRE=${{ secrets.ACCESS_TOKEN_EXPIRE }}
          REFRESH_TOKEN_EXPIRE=${{ secrets.REFRESH_TOKEN_EXPIRE }}
          FCM_BASE64_ENCODING_KEY=${{ secrets.FCM_BASE64_ENCODING_KEY }}
          FCM_PROJECT_ID=${{ secrets.FCM_PROJECT_ID }}
          OPEN_WEATHER_API_KEY=${{ secrets.OPEN_WEATHER_API_KEY }}
          SPRING_PROFILES_ACTIVE=prod
          EOF
          echo "Injected IMAGE_TAG=${IMAGE_TAG}"

      - name: Stop existing services
        working-directory: /home/ubuntu/mulkkam
        run: sudo docker compose stop backend-app

      - name: Start new services
        working-directory: /home/ubuntu/mulkkam
        run: sudo docker compose up -d backend-app
